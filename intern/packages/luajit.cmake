set(package_protocol "git")
set(package_source "http://luajit.org/git/luajit-2.0.git")

if(${package_version} STREQUAL "dev")
elseif(${package_version} STREQUAL "newest" OR ${package_version} STREQUAL "2.0.5")
  set(package_revision "0bf80b07b0672ce874feedcc777afe1b791ccb5a")
else()
  message(FATAL_ERROR "Unknown package version. Please use 'dev','newest' or '2.0.5'.")
endif()

function(build_package location)
  # MiniLua is a temporary build tool generated from source.
  add_executable(MiniLua ${location}/src/host/minilua.c)
  set_property(TARGET MiniLua PROPERTY FOLDER "3rd Party Libraries/luaJIT/Tools")
  
  # This target will be used to generate with minilua the needed code for the buildvm tool.
  if("${CMAKE_SIZEOF_VOID_P}" EQUAL "8")
    set(dasmflags -D WIN -D JIT -D FFI -D P64)
  else()
    set(dasmflags -D WIN -D JIT -D FFI)
  endif()
  add_custom_target(MiniLua_Code_Generation
    COMMAND MiniLua "../dynasm/dynasm.lua" -LN ${dasmflags} -o "host/buildvm_arch.h" "vm_x86.dasc"
    DEPENDS "../dynasm/dynasm.lua"
    WORKING_DIRECTORY "${location}/src/"
  )
  set_property(TARGET MiniLua_Code_Generation PROPERTY FOLDER "3rd Party Libraries/luaJIT/Tools")
  
  # BuildVM is a temporary build tool generated from source.
  file(GLOB buildvm_files ${location}/src/host/buildvm*.c)
  add_executable(BuildVM ${buildvm_files})
  add_dependencies(BuildVM MiniLua_Code_Generation)
  target_include_directories(BuildVM PUBLIC "${location}/src/")
  set_property(TARGET BuildVM PROPERTY FOLDER "3rd Party Libraries/luaJIT/Tools")
  
  # This target will be used to generate with buildvm the needed code for the libraries.
  set(luajit_libfiles lib_base.c lib_math.c lib_bit.c lib_string.c lib_table.c lib_io.c lib_os.c lib_package.c lib_debug.c lib_jit.c lib_ffi.c)
  add_custom_target(BuildVM_Code_Generation 
    COMMAND BuildVM -m peobj -o lj_vm.obj
    COMMAND BuildVM -m bcdef -o lj_bcdef.h ${luajit_libfiles}
    COMMAND BuildVM -m ffdef -o lj_ffdef.h ${luajit_libfiles}
    COMMAND BuildVM -m libdef -o lj_libdef.h ${luajit_libfiles}
    COMMAND BuildVM -m recdef -o lj_recdef.h ${luajit_libfiles}
    COMMAND BuildVM -m vmdef -o jit/vmdef.h ${luajit_libfiles}
    COMMAND BuildVM -m folddef -o lj_folddef.h lj_opt_fold.c
    DEPENDS ${luajit_libfiles} lj_opt_fold.c
    WORKING_DIRECTORY "${location}/src/"
  )
  set_property(TARGET BuildVM_Code_Generation PROPERTY FOLDER "3rd Party Libraries/luaJIT/Tools")
  
  # lj_vm.obj will be generated by the buildvm tool
  set_source_files_properties(
    ${location}/src/lj_vm.obj PROPERTIES
    EXTERNAL_OBJECT TRUE
    GENERATED TRUE
  )
  
  file(GLOB luajitsourcefiles ${location}/src/lj_*.c)
  file(GLOB libsourcefiles ${location}/src/lib_*.c)
  
  # Static library
  rcf_generate(module LUAJIT_STATIC luaJIT_Static "3rd Party Libraries/luaJIT" 
               ${luajitsourcefiles} ${libsourcefiles} ${location}/src/lj_vm.obj)
  AddDependency(LUAJIT_STATIC BuildVM_Code_Generation)
  AddPublicInclude(LUAJIT_STATIC "${location}/src/")
  rcf_endgenerate()  
  
  # Shared library
  rcf_generate(shared LUAJIT_SHARED luaJIT_Shared "3rd Party Libraries/luaJIT" 
               ${luajitsourcefiles} ${libsourcefiles} ${location}/src/lj_vm.obj)
  AddPublicDefine(LUAJIT_SHARED LUA_BUILD_AS_DLL)
  AddDependency(LUAJIT_SHARED BuildVM_Code_Generation)
  AddPublicInclude(LUAJIT_SHARED "${location}/src/")
  rcf_endgenerate()
  
  # Command line tool
  rcf_generate(executable LUAJIT luaJIT "3rd Party Libraries/luaJIT/Tools" 
               ${location}/src/luajit.c)
  AddDependency(LUAJIT luaJIT_Shared)
  rcf_endgenerate()
endfunction()