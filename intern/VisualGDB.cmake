include(CMakeDependentOption)
if(MSVC)
    option(USE_VGDB "Enable Visual GDB support" OFF)
endif()

if(USE_VGDB)
    FIND_PROGRAM(VSGDB_EXECUTABLE VisualGDB PATHS "C:/Program Files (x86)/Sysprogs/VisualGDB/" DOC "VisualGDB.exe")    
endif()

if(USE_VGDB)
set(VGDB_HOSTNAME "192.168.178.46" CACHE STRING "Hostname/IP of the target linux machine.")
set(VGDB_USERNAME "pi" CACHE STRING "Username of the target linux machine.")
set(VGDB_ARGUMENTS "" CACHE STRING "Additional arguments which should passed to remote cmake.")
set(VGDB_SELECTEDDIRECTORIES "" CACHE STRING "Only the specified directories will be transfered.")
set(VGDB_FILEMASKS "" CACHE STRING "All files which fit the pattern will be copied.")

function(UnixStyle path out)
    string(REPLACE ":/" "/" replaced ${path})
    set(${out} "/${replaced}" PARENT_SCOPE)
endfunction()

if(NOT TARGET MasterVGDB)
    # This target will be generated to upload the CMakeFiles.txt, directory content and generate the remote solution
    set(HOSTNAME ${VGDB_HOSTNAME})
    set(USERNAME ${VGDB_USERNAME})
    set(ARGUMENTS ${VGDB_ARGUMENTS})
    set(LOCALDIRECTORY ${CMAKE_SOURCE_DIR})
    set(VGDBTARGET MasterVGDB)
    UnixStyle(${LOCALDIRECTORY} remotedir)
    UnixStyle(${CMAKE_BINARY_DIR} BUILDDIRECTORY)
    set(BUILDDIRECTORY "/tmp/VisualGDB${BUILDDIRECTORY}")
    set(REMOTEDIRECTORY "/tmp/VisualGDB${remotedir}")
    foreach(dir ${VGDB_SELECTEDDIRECTORIES})
        list(APPEND SELECTEDDIRECTORIES "<string>${dir}</string>")
    endforeach()
    foreach(mask ${VGDB_FILEMASKS})
        set(FILEMASKS "${FILEMASKS}<string>${mask}</string>")
    endforeach()
    set(GUID "{01E97BDF-1E34-4D71-A978-0DA9835694FD}")
    configure_file("${RCF_PATH}/intern/vgdb.vcxproj.template" "${CMAKE_CURRENT_BINARY_DIR}/MasterVGDB.vcxproj" @ONLY)
    configure_file("${RCF_PATH}/intern/MasterDebug.vgdbsettings.template" "${CMAKE_CURRENT_BINARY_DIR}/MasterVGDB-Debug.vgdbsettings" @ONLY)
    configure_file("${RCF_PATH}/intern/MasterRelease.vgdbsettings.template" "${CMAKE_CURRENT_BINARY_DIR}/MasterVGDB-Release.vgdbsettings" @ONLY)
    INCLUDE_EXTERNAL_MSPROJECT(MasterVGDB "${CMAKE_CURRENT_BINARY_DIR}/MasterVGDB.vcxproj")
    set_property(TARGET MasterVGDB PROPERTY FOLDER VisualGDBTargets)
endif()

#Add additional targets to map targets from the solution.
macro(GenerateVGDBTarget projectid)
    set(${projectid}_VGDB_HOSTNAME ${VGDB_HOSTNAME})    
    set(${projectid}_VGDB_USERNAME ${VGDB_USERNAME})        
    set(${projectid}_VGDB_ARGUMENTS ${VGDB_ARGUMENTS})
           
    set(HOSTNAME ${${projectid}_VGDB_HOSTNAME})
    set(USERNAME ${${projectid}_VGDB_USERNAME})
    set(ARGUMENTS ${${projectid}_VGDB_ARGUMENTS})
    UnixStyle(${CMAKE_BINARY_DIR} BUILDDIRECTORY)
    set(LOCALDIRECTORY ${${${projectid}_NAME}_SOURCE_DIR})
    set(VGDBTARGET ${${projectid}_NAME}_VGDB)
    message(STATUS "-{${${projectid}_NAME} = ${LOCALDIRECTORY} = ${CMAKE_BINARY_DIR}")
    file(RELATIVE_PATH relativePath ${CMAKE_BINARY_DIR} ${LOCALDIRECTORY})
    UnixStyle(${CMAKE_BINARY_DIR}/${relativePath} remotedir)
    set(REMOTEDIRECTORY "/tmp/VisualGDB${remotedir}")
    set(TARGETDIRECTORY "/tmp/VisualGDB${remotedir}")
    set(BUILDDIRECTORY "/tmp/VisualGDB${BUILDDIRECTORY}")
    string(MD5 hash "${${projectid}_NAME}_VGDB")
    string(TOUPPER ${hash} hash)
    string(SUBSTRING ${hash} 0 8 hashA)
    string(SUBSTRING ${hash} 8 4 hashB)
    string(SUBSTRING ${hash} 12 4 hashC)
    string(SUBSTRING ${hash} 16 4 hashD)
    string(SUBSTRING ${hash} 20 12 hashE)
    set(GUID "{${hashA}-${hashB}-${hashC}-${hashD}-${hashE}}")
    set(BUILDPARAM "-j 4")
    foreach(filename ${${projectid}_FILES})
        file(TO_NATIVE_PATH ${filename} newFilename)
        set(HEADERFILES "${HEADERFILES}<ClCompile Include=\"${newFilename}\"/>")
    endforeach()
    configure_file("${RCF_PATH}/intern/vgdb.vcxproj.template" "${CMAKE_CURRENT_BINARY_DIR}/${${projectid}_NAME}_VGDB.vcxproj" @ONLY)

    INCLUDE_EXTERNAL_MSPROJECT(${${projectid}_NAME}_VGDB "${CMAKE_CURRENT_BINARY_DIR}/${${projectid}_NAME}_VGDB.vcxproj")
    set_target_properties(${${projectid}_NAME}_VGDB PROPERTIES FOLDER "VisualGDBTargets")
endmacro()

macro(FinalizeVGDBTarget projectid)
    file(RELATIVE_PATH relprojectdir ${CMAKE_BINARY_DIR} ${CMAKE_CURRENT_BINARY_DIR})
    UnixStyle(${CMAKE_BINARY_DIR} remotedir)
    set(PROJECTDIRECTORY "/tmp/VisualGDB${remotedir}/${relprojectdir}")
    foreach(mask ${${projectid}_FILES})
        get_filename_component(newFilename ${mask} NAME)
        set(FILEMASKS "${FILEMASKS}<string>${newFilename}</string>")
    endforeach()
    if(${projectid}_ISEXECUTABLE)
        set(TARGETNAME ${${projectid}_NAME})
        file(RELATIVE_PATH exename ${CMAKE_SOURCE_DIR} ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/${TARGETNAME}D)
        set(BINARY ${exename})
        configure_file("${RCF_PATH}/intern/Debug.vgdbsettings.template" "${CMAKE_CURRENT_BINARY_DIR}/${${projectid}_NAME}_VGDB-Debug.vgdbsettings" @ONLY)
        file(RELATIVE_PATH exename ${CMAKE_SOURCE_DIR} ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/${TARGETNAME}RD)
        set(BINARY ${exename})
        configure_file("${RCF_PATH}/intern/Release.vgdbsettings.template" "${CMAKE_CURRENT_BINARY_DIR}/${${projectid}_NAME}_VGDB-Release.vgdbsettings" @ONLY)        
    else()
        set(TARGETNAME ${${projectid}_NAME})
        configure_file("${RCF_PATH}/intern/libDebug.vgdbsettings.template" "${CMAKE_CURRENT_BINARY_DIR}/${${projectid}_NAME}_VGDB-Debug.vgdbsettings" @ONLY)
        configure_file("${RCF_PATH}/intern/libRelease.vgdbsettings.template" "${CMAKE_CURRENT_BINARY_DIR}/${${projectid}_NAME}_VGDB-Release.vgdbsettings" @ONLY)        
    endif()
    
    foreach(dep ${${projectid}_DEPS})
        if(DEFINED ${${dep}_ID}_ISLIBRARY OR DEFINED ${${dep}_ID}_ISMODULE)
            add_dependencies(${${projectid}_NAME}_VGDB ${dep}_VGDB)
            list(APPEND deps ${dep}_VGDB)
        endif()
    endforeach()
    add_dependencies(${${projectid}_NAME}_VGDB MasterVGDB)
    message(STATUS "Finalized project: ${${projectid}_NAME}_VGDB Depends on: ${deps}")    
endmacro()

endif()